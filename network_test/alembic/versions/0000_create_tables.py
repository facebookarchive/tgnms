# Copyright (c) Meta Platforms, Inc. and affiliates.
#
# This source code is licensed under the MIT license found in the
# LICENSE file in the root directory of this source tree.

"""create tables

Revision ID: 0000
Revises:
Create Date: 2020-04-09 17:05:24.258081

"""
import sqlalchemy as sa
from alembic import op


# revision identifiers, used by Alembic.
revision = "0000"
down_revision = None
branch_labels = None
depends_on = None


def upgrade():
    # ### commands auto generated by Alembic - please adjust! ###
    op.create_table(
        "network_test_schedule",
        sa.Column("id", sa.Integer(), nullable=False),
        sa.Column("enabled", sa.Boolean(), nullable=False),
        sa.Column("cron_expr", sa.String(length=255), nullable=False),
        sa.PrimaryKeyConstraint("id"),
    )
    op.create_table(
        "network_test_params",
        sa.Column("id", sa.Integer(), nullable=False),
        sa.Column("schedule_id", sa.Integer(), nullable=True),
        sa.Column(
            "test_type",
            sa.Enum("MULTIHOP", "PARALLEL", "SEQUENTIAL", name="networktesttype"),
            nullable=False,
        ),
        sa.Column("network_name", sa.String(length=255), nullable=False),
        sa.Column("iperf_options", sa.JSON(), nullable=False),
        sa.Column("whitelist", sa.JSON(none_as_null=True), nullable=True),
        sa.ForeignKeyConstraint(
            ["schedule_id"], ["network_test_schedule.id"], ondelete="SET NULL"
        ),
        sa.PrimaryKeyConstraint("id"),
    )
    op.create_index(
        op.f("ix_network_test_params_network_name"),
        "network_test_params",
        ["network_name"],
        unique=False,
    )
    op.create_table(
        "network_test_execution",
        sa.Column("id", sa.Integer(), nullable=False),
        sa.Column("params_id", sa.Integer(), nullable=False),
        sa.Column(
            "start_dt", sa.DateTime(), server_default=sa.text("now()"), nullable=False
        ),
        sa.Column("end_dt", sa.DateTime(), nullable=True),
        sa.Column(
            "status",
            sa.Enum(
                "RUNNING", "FINISHED", "ABORTED", "FAILED", name="networkteststatus"
            ),
            nullable=False,
        ),
        sa.ForeignKeyConstraint(["params_id"], ["network_test_params.id"]),
        sa.PrimaryKeyConstraint("id"),
    )
    op.create_index(
        op.f("ix_network_test_execution_status"),
        "network_test_execution",
        ["status"],
        unique=False,
    )
    op.create_table(
        "network_test_result",
        sa.Column("id", sa.Integer(), nullable=False),
        sa.Column("execution_id", sa.Integer(), nullable=False),
        sa.Column(
            "status",
            sa.Enum(
                "RUNNING", "FINISHED", "ABORTED", "FAILED", name="networkteststatus"
            ),
            nullable=False,
        ),
        sa.Column("src_node_mac", sa.String(length=255), nullable=False),
        sa.Column("dst_node_mac", sa.String(length=255), nullable=False),
        sa.Column("link_name", sa.String(length=255), nullable=True),
        sa.Column(
            "start_dt", sa.DateTime(), server_default=sa.text("now()"), nullable=False
        ),
        sa.Column("end_dt", sa.DateTime(), nullable=True),
        sa.Column("iperf_min_throughput", sa.Float(), nullable=True),
        sa.Column("iperf_max_throughput", sa.Float(), nullable=True),
        sa.Column("iperf_avg_throughput", sa.Float(), nullable=True),
        sa.Column("iperf_min_lost_percent", sa.Float(), nullable=True),
        sa.Column("iperf_max_lost_percent", sa.Float(), nullable=True),
        sa.Column("iperf_avg_lost_percent", sa.Float(), nullable=True),
        sa.Column("iperf_min_retransmits", sa.Float(), nullable=True),
        sa.Column("iperf_max_retransmits", sa.Float(), nullable=True),
        sa.Column("iperf_avg_retransmits", sa.Float(), nullable=True),
        sa.Column("iperf_client_blob", sa.Text(length=65536), nullable=True),
        sa.Column("iperf_server_blob", sa.Text(length=65536), nullable=True),
        sa.ForeignKeyConstraint(["execution_id"], ["network_test_execution.id"]),
        sa.PrimaryKeyConstraint("id"),
    )
    op.create_index(
        op.f("ix_network_test_result_dst_node_mac"),
        "network_test_result",
        ["dst_node_mac"],
        unique=False,
    )
    op.create_index(
        op.f("ix_network_test_result_src_node_mac"),
        "network_test_result",
        ["src_node_mac"],
        unique=False,
    )
    op.create_index(
        op.f("ix_network_test_result_status"),
        "network_test_result",
        ["status"],
        unique=False,
    )
    # ### end Alembic commands ###


def downgrade():
    # ### commands auto generated by Alembic - please adjust! ###
    op.drop_index(
        op.f("ix_network_test_result_status"), table_name="network_test_result"
    )
    op.drop_index(
        op.f("ix_network_test_result_src_node_mac"), table_name="network_test_result"
    )
    op.drop_index(
        op.f("ix_network_test_result_dst_node_mac"), table_name="network_test_result"
    )
    op.drop_table("network_test_result")
    op.drop_index(
        op.f("ix_network_test_execution_status"), table_name="network_test_execution"
    )
    op.drop_table("network_test_execution")
    op.drop_index(
        op.f("ix_network_test_params_network_name"), table_name="network_test_params"
    )
    op.drop_table("network_test_params")
    op.drop_table("network_test_schedule")
    # ### end Alembic commands ###

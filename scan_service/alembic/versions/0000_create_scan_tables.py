# Copyright (c) Meta Platforms, Inc. and affiliates.
#
# This source code is licensed under the MIT license found in the
# LICENSE file in the root directory of this source tree.

"""create_scan_tables

Revision ID: 0000
Revises:
Create Date: 2020-07-01 14:14:26.706443

"""
import sqlalchemy as sa
from alembic import op


# revision identifiers, used by Alembic.
revision = "0000"
down_revision = None
branch_labels = None
depends_on = None


def upgrade():
    # ### commands auto generated by Alembic - please adjust! ###
    op.create_table(
        "scan_test_schedule",
        sa.Column("id", sa.Integer(), nullable=False),
        sa.Column("enabled", sa.Boolean(), nullable=False),
        sa.Column("cron_expr", sa.String(length=255), nullable=False),
        sa.PrimaryKeyConstraint("id"),
    )
    op.create_table(
        "scan_test_params",
        sa.Column("id", sa.Integer(), nullable=False),
        sa.Column("schedule_id", sa.Integer(), nullable=True),
        sa.Column("network_name", sa.String(length=255), nullable=False),
        sa.Column("type", sa.Enum("IM", name="scantype"), nullable=False),
        sa.Column(
            "mode",
            sa.Enum("COARSE", "FINE", "SELECTIVE", "RELATIVE", name="scanmode"),
            nullable=False,
        ),
        sa.Column("options", sa.JSON(), nullable=False),
        sa.ForeignKeyConstraint(
            ["schedule_id"], ["scan_test_schedule.id"], ondelete="SET NULL"
        ),
        sa.PrimaryKeyConstraint("id"),
    )
    op.create_index(
        op.f("ix_scan_test_params_network_name"),
        "scan_test_params",
        ["network_name"],
        unique=False,
    )
    op.create_table(
        "scan_test_execution",
        sa.Column("id", sa.Integer(), nullable=False),
        sa.Column("params_id", sa.Integer(), nullable=False),
        sa.Column(
            "start_dt", sa.DateTime(), server_default=sa.text("now()"), nullable=False
        ),
        sa.Column("end_dt", sa.DateTime(), nullable=True),
        sa.Column(
            "status",
            sa.Enum("QUEUED", "RUNNING", "FINISHED", "FAILED", name="scanteststatus"),
            nullable=False,
        ),
        sa.ForeignKeyConstraint(["params_id"], ["scan_test_params.id"]),
        sa.PrimaryKeyConstraint("id"),
    )
    op.create_index(
        op.f("ix_scan_test_execution_status"),
        "scan_test_execution",
        ["status"],
        unique=False,
    )
    op.create_table(
        "connectivity_results",
        sa.Column("id", sa.Integer(), nullable=False),
        sa.Column("execution_id", sa.Integer(), nullable=False),
        sa.Column("network_name", sa.String(length=255), nullable=False),
        sa.Column("group_id", sa.Integer(), nullable=True),
        sa.Column("token", sa.Integer(), nullable=False),
        sa.Column("tx_node", sa.String(length=255), nullable=False),
        sa.Column("rx_node", sa.String(length=255), nullable=False),
        sa.Column("routes", sa.JSON(), nullable=False),
        sa.ForeignKeyConstraint(["execution_id"], ["scan_test_execution.id"]),
        sa.PrimaryKeyConstraint("id"),
    )
    op.create_table(
        "interference_results",
        sa.Column("id", sa.Integer(), nullable=False),
        sa.Column("execution_id", sa.Integer(), nullable=False),
        sa.Column("network_name", sa.String(length=255), nullable=False),
        sa.Column("group_id", sa.Integer(), nullable=True),
        sa.Column("token", sa.Integer(), nullable=False),
        sa.Column("tx_node", sa.String(length=255), nullable=False),
        sa.Column("tx_to_node", sa.String(length=255), nullable=False),
        sa.Column("tx_power_idx", sa.Integer(), nullable=True),
        sa.Column("rx_node", sa.String(length=255), nullable=False),
        sa.Column("rx_from_node", sa.String(length=255), nullable=False),
        sa.Column("inr_curr_power", sa.JSON(), nullable=False),
        sa.Column("inr_max_power", sa.JSON(), nullable=False),
        sa.ForeignKeyConstraint(["execution_id"], ["scan_test_execution.id"]),
        sa.PrimaryKeyConstraint("id"),
    )
    op.create_table(
        "scan_results",
        sa.Column("id", sa.Integer(), nullable=False),
        sa.Column("execution_id", sa.Integer(), nullable=False),
        sa.Column("network_name", sa.String(length=255), nullable=False),
        sa.Column("tx_node", sa.String(length=255), nullable=True),
        sa.Column("group_id", sa.Integer(), nullable=True),
        sa.Column("type", sa.Enum("IM", name="scantype"), nullable=False),
        sa.Column(
            "mode",
            sa.Enum("COARSE", "FINE", "SELECTIVE", "RELATIVE", name="scanmode"),
            nullable=False,
        ),
        sa.Column("results_path", sa.String(length=255), nullable=True),
        sa.Column("resp_id", sa.Integer(), nullable=True),
        sa.Column(
            "subtype",
            sa.Enum(
                "NO_CAL",
                "TOP_RX_CAL",
                "TOP_TX_CAL",
                "BOT_RX_CAL",
                "BOT_TX_CAL",
                "VBS_RX_CAL",
                "VBS_TX_CAL",
                "RX_CBF_AGGRESSOR",
                "RX_CBF_VICTIM",
                "TX_CBF_AGGRESSOR",
                "TX_CBF_VICTIM",
                name="scansubtype",
            ),
            nullable=True,
        ),
        sa.Column("start_bwgd", sa.BigInteger(), nullable=True),
        sa.Column("token", sa.Integer(), nullable=False),
        sa.Column("tx_power", sa.Integer(), nullable=True),
        sa.Column(
            "tx_status",
            sa.Enum(
                "COMPLETE",
                "INVALID_TYPE",
                "INVALID_START_TSF",
                "INVALID_STA",
                "AWV_IN_PROG",
                "STA_NOT_ASSOC",
                "REQ_BUFFER_FULL",
                "LINK_SHUT_DOWN",
                "UNSPECIFIED_ERROR",
                "UNEXPECTED_ERROR",
                "EXPIRED_TSF",
                "INCOMPL_RTCAL_BEAMS_FOR_VBS",
                name="scanfwstatus",
            ),
            nullable=True,
        ),
        sa.Column("rx_statuses", sa.JSON(), nullable=True),
        sa.Column("n_responses_waiting", sa.Integer(), nullable=True),
        sa.ForeignKeyConstraint(["execution_id"], ["scan_test_execution.id"]),
        sa.PrimaryKeyConstraint("id"),
    )
    op.create_index(
        op.f("ix_scan_results_token"), "scan_results", ["token"], unique=False
    )
    # ### end Alembic commands ###


def downgrade():
    # ### commands auto generated by Alembic - please adjust! ###
    op.drop_index(op.f("ix_scan_results_token"), table_name="scan_results")
    op.drop_table("scan_results")
    op.drop_table("interference_results")
    op.drop_table("connectivity_results")
    op.drop_index(
        op.f("ix_scan_test_execution_status"), table_name="scan_test_execution"
    )
    op.drop_table("scan_test_execution")
    op.drop_index(
        op.f("ix_scan_test_params_network_name"), table_name="scan_test_params"
    )
    op.drop_table("scan_test_params")
    op.drop_table("scan_test_schedule")
    # ### end Alembic commands ###
